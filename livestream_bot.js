const TelegramBot = require('node-telegram-bot-api');

const TOKEN = '7337121205:AAFOem-OYA2TngQ__nP6N1iGVv0BDk3wlMs';
const bot = new TelegramBot(TOKEN, { polling: true });

const activeStreams = new Map();

process.on('uncaughtException', function(err) {
    console.error('–ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

bot.on('message', async (msg) => {
    if (!msg.chat.type.includes('group')) return;


    if (msg.video_chat_started) {
        const chatId = msg.chat.id;
        console.log(msg)
        
        try {
            const chat = await bot.getChat(chatId);
            let inviteLink = chat.invite_link;
            
            if (!inviteLink) {
                const timestamp = Date.now();
                const randomNum = Math.floor(Math.random() * 1000);
                const invite = await bot.createChatInviteLink(chatId, {
                    name: `Stream_${timestamp}_${randomNum}`,
                    creates_join_request: false,
                    expire_date: 0,
                    member_limit: 0
                });
                inviteLink = invite.invite_link;
            } else {
                const timestamp = Date.now();
                const randomNum = Math.floor(Math.random() * 1000);
                const invite = await bot.createChatInviteLink(chatId, {
                    name: `Stream_${timestamp}_${randomNum}`,
                    creates_join_request: false,
                    expire_date: 0,
                    member_limit: 0
                });
                inviteLink = invite.invite_link;
            }

            const livestreamUrl = `${inviteLink}?stream_id=${Date.now()}&videochat`;
            

            console.log('Chat ID:', chatId);
            console.log('Invite Link:', inviteLink);
            console.log('Generated URL:', livestreamUrl);
            
            activeStreams.set(chatId, { livestreamUrl });
            
            await bot.sendMessage(chatId,
                'üî¥ –ù–æ–≤—ã–π –ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä –Ω–∞—á–∞–ª—Å—è!\n' +
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:', {
                reply_markup: {
                    inline_keyboard: [[{
                        text: 'üé• –í—Å—Ç—É–ø–∏—Ç—å –≤ —ç—Ñ–∏—Ä',
                        url: livestreamUrl
                    }]]
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', error);
            await bot.sendMessage(chatId, 
                '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ñ–∏—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        }
    }
    
    if (msg.video_chat_ended) {
        const chatId = msg.chat.id;
        activeStreams.delete(chatId);
        await bot.sendMessage(chatId, 'üìç –ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
});

bot.on('error', (error) => {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
});


bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

bot.on('new_chat_members', async (msg) => {
    const newMembers = msg.new_chat_members;

    const botInfo = await bot.getMe();
    
    if (newMembers.some(member => member.id === botInfo.id)) {
        await bot.sendMessage(msg.chat.id, 
            'üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É!\n' +

            '‚öôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.');
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'); 